generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id               String             @id @default(uuid())
  name             String
  sku              String             @unique
  quantity         Int
  price            Float
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  supplierId       String?
  categoryId       String?
  minimumStock     Int?               @default(0)
  delivery         Delivery[]
  category         Category?          @relation(fields: [categoryId], references: [id])
  supplier         Supplier?          @relation(fields: [supplierId], references: [id])
  stockMovements   StockMovement[]
  warehouseProduct WarehouseProduct[]

  expirationDate DateTime?
  usageStatus    UsageStatus @default(IN_STOCK)
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String     @unique
  office        Office     @default(GESTOR)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  emailVerified DateTime?
  image         String?
  password      String
  department    String?
  description   String?
  phone         String?
  accounts      Account[]
  AuditLog      AuditLog[]
  sessions      Session[]
}

model WareHouse {
  id                        String             @id @default(uuid())
  name                      String
  location                  String?
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  description               String?
  stockMovementsDestination StockMovement[]    @relation("DestinationWarehouse")
  stockMovementsOrigin      StockMovement[]    @relation("OriginWarehouse")
  warehouseProduct          WarehouseProduct[]
  Delivery                  Delivery[]
}

model WarehouseProduct {
  warehouseId String
  productId   String
  quantity    Int       @default(0)
  product     Product   @relation(fields: [productId], references: [id])
  warehouse   WareHouse @relation(fields: [warehouseId], references: [id])

  @@id([warehouseId, productId])
  @@unique([warehouseId, productId], name: "warehouseId_productId")
}

model StockMovement {
  id                     String         @id @default(uuid())
  type                   MovementType
  quantity               Int
  productId              String
  createdAt              DateTime       @default(now())
  notes                  String?
  destinationWarehouseId String?
  originWarehouseId      String?
  status                 MovementStatus @default(PENDING)
  quantityAfter          Int?
  quantityBefore         Int?
  destinationWarehouse   WareHouse?     @relation("DestinationWarehouse", fields: [destinationWarehouseId], references: [id])
  originWareHouse        WareHouse?     @relation("OriginWarehouse", fields: [originWarehouseId], references: [id])
  product                Product        @relation(fields: [productId], references: [id])
}

model Supplier {
  id              String            @id @default(uuid())
  name            String
  email           String
  contactPhone    String
  description     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deliveryTime    DateTime?
  delivery        Delivery[]
  products        Product[]
  SupplierInvoice SupplierInvoice[]
}

model SupplierInvoice {
  id         String   @id @default(uuid())
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  supplierId String

  title       String
  description String
  amount      Decimal
  dueDate     DateTime
  status      InvoiceStatus @default(PENDING)
  fileUrl     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Delivery    Delivery[]
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  entity      String
  entityId    String?
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity])
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Delivery {
  id                String         @id @default(uuid())
  productId         String
  supplierId        String
  quantity          Int
  expectedAt        DateTime
  updatedAt         DateTime       @updatedAt
  status            DeliveryStatus @default(PENDING)
  createdAt         DateTime       @default(now())
  warehouseId       String
  supplierInvoiceId String?

  product  Product  @relation(fields: [productId], references: [id])
  supplier Supplier @relation(fields: [supplierId], references: [id])

  warehouse       WareHouse        @relation(fields: [warehouseId], references: [id])
  supplierInvoice SupplierInvoice? @relation(fields: [supplierInvoiceId], references: [id])
}

enum Office {
  ADMIN
  GESTOR
}

enum MovementType {
  IN
  OUT
  TRANSFER
}

enum MovementStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum DeliveryStatus {
  PENDING
  COMPLETED
  CANCELED
  LATE
}

enum UsageStatus {
  IN_STOCK
  IN_USE
  CONSUMED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELED
}
