generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id             String          @id @default(uuid())
  name           String
  sku            String          @unique
  quantity       Int
  price          Float
  supplierId     String?
  supplier       Supplier?       @relation(fields: [supplierId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  stockMovements StockMovement[]
  category       Category?       @relation(fields: [categoryId], references: [id])
  categoryId     String?
  delivery       Delivery[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String     @unique
  emailVerified DateTime?
  password      String
  office        Office     @default(GESTOR)
  phone         String?
  department    String?
  description   String?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  AuditLog      AuditLog[]
}

enum Office {
  ADMIN
  GESTOR
}

model StockMovement {
  id          String       @id @default(uuid())
  product     Product      @relation(fields: [productId], references: [id])
  productId   String
  type        MovementType
  quantity    Int
  origin      String?
  destination String?
  notes       String?
  createdAt   DateTime     @default(now())
}

enum MovementType {
  IN
  OUT
  TRANSFER
}

model Supplier {
  id           String     @id @default(uuid())
  name         String
  email        String
  contactPhone String
  deliveryTime DateTime
  description  String
  products     Product[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  delivery     Delivery[]
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  user        User?    @relation(fields: [userId], references: [id])
  action      String
  entity      String
  entityId    String?
  description String
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([entity])
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Delivery {
  id         String         @id @default(uuid())
  product    Product        @relation(fields: [productId], references: [id])
  productId  String
  supplier   Supplier       @relation(fields: [supplierId], references: [id])
  supplierId String
  quantity   Int
  expectedAt DateTime
  status     DeliveryStatus @default(PENDING)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

enum DeliveryStatus {
  PENDING
  COMPLETED
  CANCELED
  LATE
}
